---
- name: Create release directory
  file:
    path: '{{ deploy_helper.new_release_path }}'
    state: directory

# --------------------------------------------------
# Download and extract miarec files into .../releases/{version} folder
# --------------------------------------------------

- name: Verify miarec binary presense
  stat:
    path: "{{ deploy_helper.new_release_path }}/miarec"
  register: miarec_bin_exists


- name: Add an unfinished file, to allow cleanup on successful finalize
  file:
    path: '{{ deploy_helper.new_release_path }}/{{ deploy_helper.unfinished_filename }}'
    state: touch
  when: miarec_bin_exists.stat.exists == False


- name: Download miarec tarbal
  get_url:
    url: "{{ miarec_download_base_url }}/{{ miarec_tarball_file }}"
    dest: "{{ miarec_download_dir }}/{{ miarec_tarball_file }}"
  when: miarec_bin_exists.stat.exists == False


- name: Untar the source package
  unarchive:
    src: "{{ miarec_download_dir }}/{{ miarec_tarball_file }}"
    dest: "{{ miarec_download_dir }}/"
    creates: "{{ miarec_download_dir }}/miarec-{{ miarec_version }}/miarec"
    copy: no
  when: miarec_bin_exists.stat.exists == False


- name: Move miarec files to releases folder
  shell: "mv {{ miarec_download_dir }}/miarec-{{ miarec_version}}/* {{ deploy_helper.new_release_path }}/"
  when: miarec_bin_exists.stat.exists == False


# --------------------------------------------------
# Create user/group
# --------------------------------------------------
- name: "Add miarec group '{{ miarec_bin_group }}'"
  group:
    name: "{{ miarec_bin_group }}"
    state: present
  when: miarec_bin_group != 'root'


- name: "Add miarec user '{{ miarec_bin_user }}'"
  user:
    name: "{{ miarec_bin_user }}"
    group: "{{ miarec_bin_group }}"
    comment: "MiaRec"
    shell: /bin/false
    system: yes
  when: miarec_bin_user != 'root'


# --------------------------------------------------
# Create required directory
# --------------------------------------------------
- name: Create working directory for miarec
  file:
    path: '{{ miarec_work_dir }}'
    owner: '{{ miarec_bin_user }}'
    group: '{{ miarec_bin_group }}'
    state: directory

- name: Create log directories for miarec
  file:
    path: '{{ item }}'
    owner: '{{ miarec_bin_user }}'
    group: '{{ miarec_bin_group }}'
    state: directory
  with_items:
    - '{{ miarec_log_dir }}'
    - '{{ miarec_log_dir }}/cdr'
    - '{{ miarec_log_dir }}/error'
    - '{{ miarec_log_dir }}/trace'

# --------------------------------------------------
# Recordings directory.
# Important: setgid is set on this directory.
# This allows to share access to that directory with other users (celery, apache)
# There is only one requirement: these other users should belong to group 'miarec'
# Important: pass "mode" parameter as a string rather than integer
# --------------------------------------------------
- name: Create recordings directory
  file:
    path: '{{ miarec_recordings_dir }}'
    owner: '{{ miarec_bin_user }}'
    group: '{{ miarec_bin_group }}'
    state: directory
    mode: "2775"


# --------------------------------------------------
# Configuration file
# --------------------------------------------------
- name: Configure miarec.ini file
  ini_file:
    dest: "{{ deploy_helper.new_release_path }}/miarec.ini"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - section: 'Main'
      option: 'Name'
      value: '{{ miarec_instance_name }}'
    - section: 'Recording'
      option: 'OutputDirectory'
      value: '{{ miarec_recordings_dir }}'
    - section: 'SQLConfig'
      option: 'Host'
      value: '{{ miarec_db_host }}:{{ miarec_db_port }}'
    - section: 'SQLConfig'
      option: 'Database'
      value: '{{ miarec_db_name }}'
    - section: 'SQLConfig'
      option: 'Username'
      value: '{{ miarec_db_user }}'
    - section: 'SQLConfig'
      option: 'Password'
      value: '{{ miarec_db_password }}'
    - section: 'SQLCallsLog'
      option: 'Host'
      value: '{{ miarec_db_host }}:{{ miarec_db_port }}'
    - section: 'SQLCallsLog'
      option: 'Database'
      value: '{{ miarec_db_name }}'
    - section: 'SQLCallsLog'
      option: 'Username'
      value: '{{ miarec_db_user }}'
    - section: 'SQLCallsLog'
      option: 'Password'
      value: '{{ miarec_db_password }}'
    - section: 'RedisCallsLog'
      option: 'Host'
      value: '{{ miarec_redis_host }}:{{ miarec_redis_port }}'
    - section: 'FileCallsLog'
      option: 'DetailFile'
      value: '{{ miarec_log_dir }}/cdr/calls_log.csv'
    - section: 'FileStreamsLog'
      option: 'DetailFile'
      value: '{{ miarec_log_dir }}/cdr/streams_log.csv'
    - section: 'FileParticipantsLog'
      option: 'DetailFile'
      value: '{{ miarec_log_dir }}/cdr/participants_log.csv'
    - section: 'FileAudioLog'
      option: 'DetailFile'
      value: '{{ miarec_log_dir }}/cdr/files_log.csv'
    - section: 'ErrorsLog::File'
      option: 'File'
      value: '{{ miarec_log_dir }}/error/errors.log'
  notify: restart miarec


# --------------------------------------------------
# Install service
# --------------------------------------------------
- fail:
    msg: "Only SystemD and Upstart systems are supported at the moment"
  when: ansible_service_mgr != "upstart" and ansible_service_mgr != "systemd"


- fail:
    msg: "MiaRec upstart script doesn't support run as unprivileged user yet"
  when: ansible_service_mgr == "upstart" and miarec_bin_user != 'root'


- name: Install miarec service | systemd
  template:
    src: "etc_systemd_system_miarec.service.j2"
    dest: "/etc/systemd/system/miarec.service"
    owner: root
    group: root
    mode: 0755
  notify: start miarec
  when: ansible_service_mgr == "systemd"


- name: Install miarec service | upstart
  template:
    src: "etc_init_miarec.conf.j2"
    dest: "/etc/init/miarec.conf"
    owner: root
    group: root
    mode: 0755
  notify: start miarec
  when: ansible_service_mgr == "upstart"


- name: Enable miarec service | systemd or upstart
  service: 
    name: miarec
    enabled: yes
  when: ansible_service_mgr == "systemd" or ansible_service_mgr == "upstart"

# Important! do not start the service right now. Postpone it until deploy_helper creates symbolic link to new release folder.

# --------------------------------------------------
# Cleanup
# --------------------------------------------------
- name: Clean up the downloaded files
  file: 
    path: '{{ item }}'
    state: absent
  with_items:
    - "{{ miarec_download_dir }}/{{ miarec_tarball_file }}"
    - "{{ miarec_download_dir }}/{{ miarec_tarball_file }}.asc"
  when: miarec_cleanup_downloads|bool

